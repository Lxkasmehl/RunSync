name: RunSync Tasks

on:
  workflow_dispatch:
    inputs:
      task_type:
        description: "Task to run"
        required: true
        default: "update_activities"
        type: choice
        options:
          - update_activities
          - update_p4_p7
          - transfer_garmin_stop
          - transfer_garmin_no_stop
      password:
        description: "Password for authentication"
        required: true
        type: string

jobs:
  runsync-task:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip curl locales
          sudo locale-gen de_DE.UTF-8

      - name: Install Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify password
        run: |
          if [ "${{ github.event.inputs.password }}" != "${{ secrets.ADMIN_PASSWORD }}" ]; then
            echo "‚ùå Invalid password"
            exit 1
          fi
          echo "‚úÖ Password verified"

      - name: Run Update Activities Task
        if: github.event.inputs.task_type == 'update_activities'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "üöÄ Starting Update Activities Task..."
          python -c "
          from main_app import update_activities_since_first_not_completed_day
          from strava_client import StravaClient
          from sheets_client import SheetsClient

          strava_client = StravaClient()
          sheets_client = SheetsClient()

          try:
              update_activities_since_first_not_completed_day(sheets_client, strava_client)
              print('‚úÖ Update Activities Task completed successfully!')
          except Exception as e:
              print(f'‚ùå Update Activities Task failed: {e}')
              exit(1)
          "

      - name: Run Update P4/P7 Worksheets Task
        if: github.event.inputs.task_type == 'update_p4_p7'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "üöÄ Starting Update P4/P7 Worksheets Task..."
          python -c "
          from main_app import update_p4_p7_worksheets
          from strava_client import StravaClient
          from sheets_client import SheetsClient

          strava_client = StravaClient()
          sheets_client = SheetsClient()

          try:
              update_p4_p7_worksheets(sheets_client, strava_client)
              print('‚úÖ Update P4/P7 Worksheets Task completed successfully!')
          except Exception as e:
              print(f'‚ùå Update P4/P7 Worksheets Task failed: {e}')
              exit(1)
          "

      - name: Run Garmin Transfer with Stop Task
        if: github.event.inputs.task_type == 'transfer_garmin_stop'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "üöÄ Starting Garmin Transfer with Stop Task..."
          python -c "
          from main_app import transfer_activities_from_Strava_to_Garmin_until_already_transferred
          from strava_client import StravaClient
          from garmin_client import GarminClient
          from selenium.webdriver.support.ui import WebDriverWait
          import undetected_chromedriver as uc

          strava_client = StravaClient()
          garmin_client = GarminClient()

          # Set up Chrome in headless mode for GitHub Actions
          options = uc.ChromeOptions()
          options.add_argument('--headless')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          options.add_argument('--disable-gpu')
          options.add_argument('--window-size=1920,1080')

          driver = uc.Chrome(options=options)
          wait = WebDriverWait(driver, 20)

          try:
              transfer_activities_from_Strava_to_Garmin_until_already_transferred(strava_client, garmin_client, driver, wait)
              print('‚úÖ Garmin Transfer with Stop Task completed successfully!')
          except Exception as e:
              print(f'‚ùå Garmin Transfer with Stop Task failed: {e}')
              exit(1)
          finally:
              driver.quit()
          "

      - name: Run Garmin Transfer without Stop Task
        if: github.event.inputs.task_type == 'transfer_garmin_no_stop'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "üöÄ Starting Garmin Transfer without Stop Task..."
          python -c "
          from main_app import transfer_all_activities_not_yet_transferred_from_Strava_to_Garmin_without_stop
          from strava_client import StravaClient
          from garmin_client import GarminClient
          from selenium.webdriver.support.ui import WebDriverWait
          import undetected_chromedriver as uc

          strava_client = StravaClient()
          garmin_client = GarminClient()

          # Set up Chrome in headless mode for GitHub Actions
          options = uc.ChromeOptions()
          options.add_argument('--headless')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          options.add_argument('--disable-gpu')
          options.add_argument('--window-size=1920,1080')

          driver = uc.Chrome(options=options)
          wait = WebDriverWait(driver, 20)

          try:
              transfer_all_activities_not_yet_transferred_from_Strava_to_Garmin_without_stop(strava_client, garmin_client, driver, wait)
              print('‚úÖ Garmin Transfer without Stop Task completed successfully!')
          except Exception as e:
              print(f'‚ùå Garmin Transfer without Stop Task failed: {e}')
              exit(1)
          finally:
              driver.quit()
          "

      - name: Task completed
        run: |
          echo "üéâ Task '${{ github.event.inputs.task_type }}' completed successfully!"
          echo "üìä Check the logs above for detailed information."
