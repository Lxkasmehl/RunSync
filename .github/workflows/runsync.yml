name: RunSync Tasks

on:
  workflow_dispatch:
    inputs:
      task_type:
        description: "Task to run"
        required: true
        default: "update_sheets_data"
        type: choice
        options:
          - update_sheets_data
          - transfer_garmin_stop
          - transfer_garmin_no_stop
      password:
        description: "Password for authentication"
        required: true
        type: string

jobs:
  runsync-task:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip curl locales xvfb
          sudo locale-gen de_DE.UTF-8

      - name: Install Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # Get Chrome version for debugging
          google-chrome --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify password
        run: |
          if [ "${{ github.event.inputs.password }}" != "${{ secrets.ADMIN_PASSWORD }}" ]; then
            echo "‚ùå Invalid password"
            exit 1
          fi
          echo "‚úÖ Password verified"

      - name: Run Update Sheets Data Task
        if: github.event.inputs.task_type == 'update_sheets_data'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "üöÄ Starting Update Sheets Data Task..."
          python -c "
          from main_app import update_activities_since_first_not_completed_day, update_p4_p7_worksheets
          from strava_client import StravaClient
          from sheets_client import SheetsClient

          strava_client = StravaClient()
          sheets_client = SheetsClient()

          try:
              print('üìä Updating activities...')
              update_activities_since_first_not_completed_day(sheets_client, strava_client)
              print('‚úÖ Activities updated successfully!')
              
              print('üìä Updating P4/P7 worksheets...')
              update_p4_p7_worksheets(sheets_client, strava_client)
              print('‚úÖ P4/P7 worksheets updated successfully!')
              
              print('‚úÖ Update Sheets Data Task completed successfully!')
          except Exception as e:
              print(f'‚ùå Update Sheets Data Task failed: {e}')
              exit(1)
          "

      - name: Run Garmin Transfer with Stop Task
        if: github.event.inputs.task_type == 'transfer_garmin_stop'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          # Start virtual display for non-headless Chrome
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 2
          echo "üöÄ Starting Garmin Transfer with Stop Task..."
          python -c "
          from main_app import transfer_activities_from_Strava_to_Garmin_until_already_transferred
          from strava_client import StravaClient
          from garmin_client import GarminClient
          from selenium.webdriver.support.ui import WebDriverWait
          import undetected_chromedriver as uc

          strava_client = StravaClient()
          garmin_client = GarminClient()

          # Chrome options will be created fresh for each attempt

          # Use undetected_chromedriver with manual ChromeDriver management
          import os
          import subprocess

          # Get Chrome version
          chrome_version = subprocess.check_output(['google-chrome', '--version']).decode('utf-8').strip()
          print('Chrome version:', chrome_version)

          # Extract major version number - handle different Chrome version formats
          version_parts = chrome_version.split()
          if len(version_parts) >= 3:
              # Format: Google Chrome 140.0.7339.0
              major_version = version_parts[2].split('.')[0]
          else:
              # Fallback format
              major_version = chrome_version.split('.')[0].split()[-1]
          print('Chrome major version:', major_version)

          # Validate that we got a valid version number
          try:
              major_version_int = int(major_version)
              print('Parsed major version as integer:', major_version_int)
          except ValueError:
              print('Failed to parse major version, using fallback version 140')
              major_version = '140'
              major_version_int = 140

          driver = None
          try:
              # Create fresh options for each attempt
              options1 = uc.ChromeOptions()
              # Remove --headless for Garmin compatibility
              options1.add_argument('--no-sandbox')
              options1.add_argument('--disable-dev-shm-usage')
              options1.add_argument('--disable-gpu')
              options1.add_argument('--window-size=1920,1080')
              options1.add_argument('--disable-extensions')
              options1.add_argument('--disable-plugins')
              options1.add_argument('--disable-images')
              options1.add_argument('--disable-javascript')
              options1.add_argument('--timeout=30000')
              options1.add_argument('--page-load-strategy=normal')
              
              # Try with the detected major version
              print('Attempting to start ChromeDriver with version', major_version_int)
              driver = uc.Chrome(options=options1, version_main=major_version_int)
              print('ChromeDriver started successfully with version', major_version_int)
          except Exception as e:
              print('Failed with version', major_version, ':', str(e))
              try:
                  # Create fresh options for second attempt
                  options2 = uc.ChromeOptions()
                  # Remove --headless for Garmin compatibility
                  options2.add_argument('--no-sandbox')
                  options2.add_argument('--disable-dev-shm-usage')
                  options2.add_argument('--disable-gpu')
                  options2.add_argument('--window-size=1920,1080')
                  options2.add_argument('--disable-extensions')
                  options2.add_argument('--disable-plugins')
                  options2.add_argument('--disable-images')
                  options2.add_argument('--disable-javascript')
                  
                  # Try with auto-detection as fallback
                  print('Attempting to start ChromeDriver with auto-detection')
                  driver = uc.Chrome(options=options2, version_main=None)
                  print('ChromeDriver started successfully with auto-detection')
              except Exception as e2:
                  print('Auto-detection also failed:', str(e2))
                  try:
                      # Create fresh options for third attempt
                      options3 = uc.ChromeOptions()
                      # Remove --headless for Garmin compatibility
                      options3.add_argument('--no-sandbox')
                      options3.add_argument('--disable-dev-shm-usage')
                      options3.add_argument('--disable-gpu')
                      options3.add_argument('--window-size=1920,1080')
                      options3.add_argument('--disable-extensions')
                      options3.add_argument('--disable-plugins')
                      options3.add_argument('--disable-images')
                      options3.add_argument('--disable-javascript')
                      
                      # Try with a slightly older version
                      print('Attempting to start ChromeDriver with version', major_version_int - 1)
                      driver = uc.Chrome(options=options3, version_main=major_version_int - 1)
                      print('ChromeDriver started successfully with version', major_version_int - 1)
                  except Exception as e3:
                      print('All attempts failed:', str(e3))
                      raise
          wait = WebDriverWait(driver, 60)  # Increased timeout to 60 seconds

          try:
              print('Starting Garmin transfer process...')
              transfer_activities_from_Strava_to_Garmin_until_already_transferred(strava_client, garmin_client, driver, wait)
              print('‚úÖ Garmin Transfer with Stop Task completed successfully!')
          except Exception as e:
              print('‚ùå Garmin Transfer with Stop Task failed:')
              print('Error type:', type(e).__name__)
              print('Error message:', str(e))
              import traceback
              print('Full traceback:')
              traceback.print_exc()
              exit(1)
          finally:
              if driver:
                  driver.quit()
          "

      - name: Run Garmin Transfer without Stop Task
        if: github.event.inputs.task_type == 'transfer_garmin_no_stop'
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          DOCUMENT_NAME: ${{ secrets.DOCUMENT_NAME }}
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          # Start virtual display for non-headless Chrome
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 2
          echo "üöÄ Starting Garmin Transfer without Stop Task..."
          python -c "
          from main_app import transfer_all_activities_not_yet_transferred_from_Strava_to_Garmin_without_stop
          from strava_client import StravaClient
          from garmin_client import GarminClient
          from selenium.webdriver.support.ui import WebDriverWait
          import undetected_chromedriver as uc

          strava_client = StravaClient()
          garmin_client = GarminClient()

          # Chrome options will be created fresh for each attempt

          # Use undetected_chromedriver with manual ChromeDriver management
          import os
          import subprocess

          # Get Chrome version
          chrome_version = subprocess.check_output(['google-chrome', '--version']).decode('utf-8').strip()
          print('Chrome version:', chrome_version)

          # Extract major version number - handle different Chrome version formats
          version_parts = chrome_version.split()
          if len(version_parts) >= 3:
              # Format: Google Chrome 140.0.7339.0
              major_version = version_parts[2].split('.')[0]
          else:
              # Fallback format
              major_version = chrome_version.split('.')[0].split()[-1]
          print('Chrome major version:', major_version)

          # Validate that we got a valid version number
          try:
              major_version_int = int(major_version)
              print('Parsed major version as integer:', major_version_int)
          except ValueError:
              print('Failed to parse major version, using fallback version 140')
              major_version = '140'
              major_version_int = 140

          driver = None
          try:
              # Create fresh options for each attempt
              options1 = uc.ChromeOptions()
              # Remove --headless for Garmin compatibility
              options1.add_argument('--no-sandbox')
              options1.add_argument('--disable-dev-shm-usage')
              options1.add_argument('--disable-gpu')
              options1.add_argument('--window-size=1920,1080')
              options1.add_argument('--disable-extensions')
              options1.add_argument('--disable-plugins')
              options1.add_argument('--disable-images')
              options1.add_argument('--disable-javascript')
              options1.add_argument('--timeout=30000')
              options1.add_argument('--page-load-strategy=normal')
              
              # Try with the detected major version
              print('Attempting to start ChromeDriver with version', major_version_int)
              driver = uc.Chrome(options=options1, version_main=major_version_int)
              print('ChromeDriver started successfully with version', major_version_int)
          except Exception as e:
              print('Failed with version', major_version, ':', str(e))
              try:
                  # Create fresh options for second attempt
                  options2 = uc.ChromeOptions()
                  # Remove --headless for Garmin compatibility
                  options2.add_argument('--no-sandbox')
                  options2.add_argument('--disable-dev-shm-usage')
                  options2.add_argument('--disable-gpu')
                  options2.add_argument('--window-size=1920,1080')
                  options2.add_argument('--disable-extensions')
                  options2.add_argument('--disable-plugins')
                  options2.add_argument('--disable-images')
                  options2.add_argument('--disable-javascript')
                  
                  # Try with auto-detection as fallback
                  print('Attempting to start ChromeDriver with auto-detection')
                  driver = uc.Chrome(options=options2, version_main=None)
                  print('ChromeDriver started successfully with auto-detection')
              except Exception as e2:
                  print('Auto-detection also failed:', str(e2))
                  try:
                      # Create fresh options for third attempt
                      options3 = uc.ChromeOptions()
                      # Remove --headless for Garmin compatibility
                      options3.add_argument('--no-sandbox')
                      options3.add_argument('--disable-dev-shm-usage')
                      options3.add_argument('--disable-gpu')
                      options3.add_argument('--window-size=1920,1080')
                      options3.add_argument('--disable-extensions')
                      options3.add_argument('--disable-plugins')
                      options3.add_argument('--disable-images')
                      options3.add_argument('--disable-javascript')
                      
                      # Try with a slightly older version
                      print('Attempting to start ChromeDriver with version', major_version_int - 1)
                      driver = uc.Chrome(options=options3, version_main=major_version_int - 1)
                      print('ChromeDriver started successfully with version', major_version_int - 1)
                  except Exception as e3:
                      print('All attempts failed:', str(e3))
                      raise
          wait = WebDriverWait(driver, 60)  # Increased timeout to 60 seconds

          try:
              print('Starting Garmin transfer process...')
              transfer_all_activities_not_yet_transferred_from_Strava_to_Garmin_without_stop(strava_client, garmin_client, driver, wait)
              print('‚úÖ Garmin Transfer without Stop Task completed successfully!')
          except Exception as e:
              print('‚ùå Garmin Transfer without Stop Task failed:')
              print('Error type:', type(e).__name__)
              print('Error message:', str(e))
              import traceback
              print('Full traceback:')
              traceback.print_exc()
              exit(1)
          finally:
              if driver:
                  driver.quit()
          "

      - name: Task completed
        run: |
          echo "üéâ Task '${{ github.event.inputs.task_type }}' completed successfully!"
          echo "üìä Check the logs above for detailed information."
